<html>
<head>
<style typt = "text/css">
  * {
  padding:0;
  margin:0;
}
.container {
  padding:20px;
  margin:20px;
  background-color:#eee;
  border:1px #999 solid;
  font-size:14px;
}
.mainbox {
  float:left;
  width:100%;
}
.content {
  margin:0 210px 0 310px;
  padding:20px;
  background-color:#fff;
  line-height:20px;
}
.left-side {
  float:left;
  padding:20px;
  margin-left:-100%;
  background-color:#fff;
  border:1px #999 solid;
  width:160px;
  
}
.right-side {
  float:left;
  padding:20px;
  margin-left:-170px;
  border:1px #999 solid;
  background-color:#fff;
  width:80px;
}
.container:after {
  display:block;
  visibility:hidden;
  font-size:0;
  line-height;0;
  clear:both;
  content:"";
}
.teamLogo {
  float:left;
  margin-right:20px;
  padding:20px;
  width:40px;
  height:40px;
  border:1px #999 solid;
  background-color:#eee;
}
.personalLogo {
  margin-bottom:20px;
  padding:20px;
  width:40px;
  height:40px;
  border:1px #999 solid;
  background-color:#eee;
}
#lastChild {
  margin-bottom:0;
}
.content ul {
  margin-left:20px;
}
</style>
</head>
  <body>
    <div class = "container">
      
      <div class = "mainbox">
        <div class = "content">
          <h3><span>重要说明</span></h3>
          <p>百度前端技术学院的课程任务是由百度前端工程师专为对前端不同掌握程度的同学设计。我们尽力保证课程内容的质量以及学习难度的合理性，但即使如此，真正决定课程效果的，还是你的每一次思考和实践。</p>
          <p>课程多数题目的解决方案都不是唯一的，这和我们在实际工作中的情况也是一致的。因此，我们的要求不仅仅是实现设计稿的效果，更是要多去思考不同的解决方案，评估不同方案的优劣，然后使用在该场景下最优雅的方式去实现。那些最终没有被我们采纳的方案，同样也可以帮助我们学到很多知识。所以，我们列出的参考资料未必是实现需求所必须的。有的时候，实现题目的要求很简单，甚至参考资料里就有，但是背后的思考和亲手去实践却是任务最关键的一部分。在学习这些资料时，要多思考，多提问，多质疑。相信通过和小伙伴们的交流，能让你的学习事半功倍。</p>
           <h3>任务目标</h3>
            <ul>
              <li>掌握HTML/CSS布局的概念</li>
              <li>掌握盒模型的概念</li>
              <li>掌握position与float的概念以及在布局时的用法</li>
            </ul>
          <h3>任务描述</h3>
          <ul>
            <li>使用 HTML 与 CSS 按照 示例图（点击查看） 实现三栏式布局。</li>
            <li>左右两栏宽度固定，中间一栏根据父元素宽度填充满，最外面的框应理解为浏览器。背景色为 #eee 区域的高度取决于三个子元素中最高的高度。</li>
          </ul>
          <h3>任务注意事项</h3>
          <ul>
            <li>尝试 position 和 float 的效果，思考它们的异同和应用场景。</li>
            <li>注意测试不同情况，尤其是极端情况下的效果。</li>
            <li>图片和文字内容请自行替换，尽可能体现团队的特色。</li>
            <li>调节浏览器宽度，固定宽度和自适应宽度的效果始终符合预期。</li>
            <li>改变中间一栏的内容长度，以确保在中间一栏较高和右边一栏较高时，父元素的高度始终为子元素中最高的高度。</li>
            <li>其他效果图中给出的标识均被正确地实现。</li>
          </ul>
          <h3>参考资料</h3>
          <ul>
            <li>MDN：position：了解 CSS position 属性的基本知识</li>
            <li>MDN：float：了解 CSS float 属性的基本知识</li>
            <li>Learn CSS Positioning in Ten Steps：通过具体的例子熟悉 position 属性</li>
            <li>清除浮动（clearfix hack）：清除浮动是什么，如何简单地清除浮动</li>
            <li>StackOverflow：Which method of ‘clearfix’ is best?：清除浮动黑科技完整解读</li>
          </ul>
          <ul>
            <li>MDN：position：了解 CSS position 属性的基本知识</li>
            <li>MDN：float：了解 CSS float 属性的基本知识</li>
            <li>Learn CSS Positioning in Ten Steps：通过具体的例子熟悉 position 属性</li>
            <li>清除浮动（clearfix hack）：清除浮动是什么，如何简单地清除浮动</li>
            <li>StackOverflow：Which method of ‘clearfix’ is best?：清除浮动黑科技完整解读</li>
          </ul>
        </div>
      </div>
      <div class = "left-side">
        <div class = "teamLogo">团队logo<br />80x80
          
        </div>
        团队名称
      </div>
      <div class = "right-side">
        <div class = "personalLogo">个人logo<br />80x80
          
        </div>
        <div class = "personalLogo">个人logo<br />80x80
          
        </div>
        <div class = "personalLogo">个人logo<br />80x80
          
        </div>
        <div class = "personalLogo" id = "lastChild">个人logo<br />80x80
          
        </div>
      </div>
    </div>
    <script type = "text/javaScript">
    function compute(){
      console.log("test");
      divEles = document.getElementsByTagName("div");
      for (i = 0, len = divEles.length; i < len; i ++){
      console.log(divEles[i].className +  ":" + divEles[i].clientWidth);
}
};
    compute()
    </script>
  </body>
</html>
